
import java.util.*;
import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;

@SuppressWarnings("all")
public class Entry implements java.io.Serializable {
  private static Number e = 0L;

  public static Number inc() {

    e = Entry.e.longValue() + 1L;
    return Entry.e;
  }

  public Entry() {}

  public void Entry_T1_Run(final TestAccumulator testAccumulator) {

    final Store store = new Store();
    final IdGenerator gen = new IdGenerator();
    {
      final Number ID_1 = gen.inc();
      store.staticReg(ID_1, Other.class);
    }

    SequenceTraceNode sequence_1 = new SequenceTraceNode();
    SequenceTraceNode sequence_2 = new SequenceTraceNode();
    AlternativeTraceNode alternatives_2 = new AlternativeTraceNode();
    SequenceTraceNode sequence_3 = new SequenceTraceNode();
    CallStatementPp callStm_1 =
        new CallStatementPp() {
          public Object execute() {

            return Entry.inc();
          }

          public String toString() {

            return "Entry`inc()";
          }
        };
    StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);
    sequence_3.add(apply_1);

    CallStatementPp callStm_2 =
        new CallStatementPp() {
          public Object execute() {

            return Other.inc();
          }

          public String toString() {

            return "Other`inc()";
          }
        };
    StatementTraceNode apply_2 = new StatementTraceNode(callStm_2);
    sequence_3.add(apply_2);

    SequenceTraceNode sequence_4 = new SequenceTraceNode();
    CallStatementPp callStm_3 =
        new CallStatementPp() {
          public Object execute() {

            return Entry.inc();
          }

          public String toString() {

            return "Entry`inc()";
          }
        };
    StatementTraceNode apply_3 = new StatementTraceNode(callStm_3);
    sequence_4.add(apply_3);

    CallStatementPp callStm_4 =
        new CallStatementPp() {
          public Object execute() {

            return Other.inc();
          }

          public String toString() {

            return "Other`inc()";
          }
        };
    StatementTraceNode apply_4 = new StatementTraceNode(callStm_4);
    sequence_4.add(apply_4);

    alternatives_2.add(sequence_3);
    alternatives_2.add(sequence_4);
    sequence_2.add(alternatives_2);

    sequence_1.add(sequence_2);

    TraceNode.executeTests(sequence_1, Entry.class, testAccumulator, store);
  }

  public String toString() {

    return "Entry{" + "e := " + Utils.toString(e) + "}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Other implements java.io.Serializable {
  private static Number c = 0L;

  public static Number inc() {

    c = Other.c.longValue() + 1L;
    return Other.c;
  }

  public Other() {}

  public String toString() {

    return "Other{" + "c := " + Utils.toString(c) + "}";
  }
}

##########
