
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Object Run() {

    final Func_1<Number, Boolean> search =
        new Func_1<Number, Boolean>() {
          public Boolean eval(final Number x) {

            return Utils.equals(x, 2L);
          }
        };
    return fun(search, SeqUtil.seq(1L, 2L, 3L), Utils.NAT1);
  }

  public Entry() {}

  private static <T> Boolean fun(
      final Func_1<T, Boolean> search, final VDMSeq res, final Object _type_T) {

    return search.eval(((T) ((Number) Utils.get(res, 2L))));
  }

  public String toString() {

    return "Entry{}";
  }
}

##########


import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public interface Func_1<T_1, T_2> {
  public abstract T_2 eval(final T_1 param_1);
}

##########
