
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Object Run() {

    final Func_1<Number, Number> f =
        new Func_1<Number, Number>() {
          public Number eval(final Number x) {

            return x.longValue() + 1L;
          }
        };
    final Func_1<Number, Number> g =
        new Func_1<Number, Number>() {
          public Number eval(final Number x) {

            return x.longValue() + 1L;
          }
        };
    final Func_1<Number, Number> h = func_compose(f, g, Utils.INT, Utils.INT, Utils.INT);
    return h.eval(2L);
  }

  public Entry() {}

  private static <A, B, C> Func_1<A, C> func_compose(
      final Func_1<A, B> f,
      final Func_1<B, C> g,
      final Object _type_A,
      final Object _type_B,
      final Object _type_C) {

    return new Func_1<A, C>() {
      public C eval(final A x) {

        return g.eval(f.eval(x));
      }
    };
  }

  public String toString() {

    return "Entry{}";
  }
}

##########


import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public interface Func_1<T_1, T_2> {
  public abstract T_2 eval(final T_1 param_1);
}

##########
