
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Object Run() {

    final VDMSeq xs = SeqUtil.seq(1L, 2L, 3L);
    final Func_1<Number, Number> func =
        new Func_1<Number, Number>() {
          public Number eval(final Number x) {

            return x.longValue() + 1L;
          }
        };
    return seq_map(Utils.copy(xs), func, Utils.INT, Utils.INT);
  }

  public Entry() {}

  private static <A, B> VDMSeq seq_map(
      final VDMSeq s, final Func_1<A, B> f, final Object _type_A, final Object _type_B) {

    if (Utils.empty(s)) {
      return SeqUtil.seq();

    } else {
      return SeqUtil.conc(
          SeqUtil.seq(f.eval(((A) s.get(0)))),
          seq_map(SeqUtil.tail(Utils.copy(s)), f, _type_A, _type_B));
    }
  }

  public String toString() {

    return "Entry{}";
  }
}

##########


import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public interface Func_1<T_1, T_2> {
  public abstract T_2 eval(final T_1 param_1);
}

##########
