
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static VDMSet op() {

    final Func_1<Number, VDMSet> d =
        new Func_1<Number, VDMSet>() {
          public VDMSet eval(final Number x) {

            VDMSet setCompResult_1 = SetUtil.set();
            VDMSet set_1 = SetUtil.set(1L, 2L, 3L);
            for (Iterator iterator_1 = set_1.iterator(); iterator_1.hasNext(); ) {
              Number z = ((Number) iterator_1.next());
              setCompResult_1.add(z);
            }
            return Utils.copy(setCompResult_1);
          }
        };
    return d.eval(40L);
  }

  public static Object Run() {

    return op();
  }

  public Entry() {}

  public String toString() {

    return "Entry{}";
  }
}

##########


import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public interface Func_1<T_1, T_2> {
  public abstract T_2 eval(final T_1 param_1);
}

##########
