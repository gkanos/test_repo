
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Object Run() {

    final Func_1<Number, Character> f =
        new Func_1<Number, Character>() {
          public Character eval(final Number x) {

            return 'a';
          }
        };
    final VDMSeq xs = SeqUtil.seq(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L);
    return nat_char_map(Utils.copy(xs)).eval(f);
  }

  public Entry() {}

  public static Func_1<Func_1<Number, Character>, VDMSeq> nat_char_map(final VDMSeq s) {

    return new Func_1<Func_1<Number, Character>, VDMSeq>() {
      public VDMSeq eval(final Func_1<Number, Character> f) {

        VDMSeq ternaryIfExp_1 = null;

        if (Utils.empty(s)) {
          ternaryIfExp_1 = SeqUtil.seq();
        } else {
          ternaryIfExp_1 =
              SeqUtil.conc(
                  SeqUtil.seq(f.eval(((Number) s.get(0)))),
                  nat_char_map(SeqUtil.tail(Utils.copy(s))).eval(f));
        }

        return Utils.copy(ternaryIfExp_1);
      }
    };
  }

  public String toString() {

    return "Entry{}";
  }
}

##########


import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public interface Func_1<T_1, T_2> {
  public abstract T_2 eval(final T_1 param_1);
}

##########
