
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class A {
  public VDMSeq xs = SeqUtil.seq('h');

  public A() {}

  public String toString() {

    return "A{" + "xs := " + Utils.toString(xs) + "}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Object Run() {

    final VDMSeq xs = SeqUtil.seq(new A(), new A());
    {
      VDMSeq str = SeqUtil.seq();
      for (Iterator iterator_1 = xs.iterator(); iterator_1.hasNext(); ) {
        Object x = (Object) iterator_1.next();
        Character apply_1 = null;
        if (x instanceof A) {
          apply_1 = ((Character) Utils.get(((A) x).xs, 1L));
        } else {
          throw new RuntimeException("Missing member: xs");
        }

        str = SeqUtil.conc(Utils.copy(str), SeqUtil.seq(apply_1));
      }
      return Utils.copy(str);
    }
  }

  public Entry() {}

  public String toString() {

    return "Entry{}";
  }
}

##########


import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public interface B {}

##########
