
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class A {
  public Number op() {

    return 1L;
  }

  public A() {}

  public String toString() {

    return "A{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class B {
  public Number op() {

    return 2L;
  }

  public B() {}

  public String toString() {

    return "B{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class C {
  public Number op() {

    return 3L;
  }

  public C() {}

  public String toString() {

    return "C{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  private static final Object w = new B();

  public static Number Run() {

    final Entry e = new Entry();
    Object callStmObj_1 = e.w;
    if (callStmObj_1 instanceof A) {
      return ((A) callStmObj_1).op();
    } else if (callStmObj_1 instanceof B) {
      return ((B) callStmObj_1).op();
    } else if (callStmObj_1 instanceof C) {
      return ((C) callStmObj_1).op();
    } else {
      throw new RuntimeException("Missing operation member: op");
    }
  }

  public Entry() {}

  public String toString() {

    return "Entry{" + "w = " + Utils.toString(w) + "}";
  }
}

##########
