
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class A {
  public VDMSeq s() {

    return SeqUtil.seq();
  }

  public A() {}

  public String toString() {

    return "A{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class B {
  public VDMSeq s() {

    return SeqUtil.seq();
  }

  public B() {}

  public String toString() {

    return "B{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Number Run() {

    final VDMSeq xs = SeqUtil.seq(new A(), new B());
    {
      Number counter = 0L;
      for (Iterator iterator_1 = SeqUtil.elems(Utils.copy(xs)).iterator(); iterator_1.hasNext(); ) {
        Object x = (Object) iterator_1.next();
        VDMSeq apply_1 = null;
        if (x instanceof A) {
          apply_1 = ((A) x).s();
        } else if (x instanceof B) {
          apply_1 = ((B) x).s();
        } else {
          throw new RuntimeException("Missing member: s");
        }

        if (Utils.equals(apply_1.size(), 0L)) {
          counter = counter.longValue() + 1L;
        }
      }
      return counter;
    }
  }

  public Entry() {}

  public String toString() {

    return "Entry{}";
  }
}

##########
