
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class A {
  public Number op(final Number x) {

    return 1L;
  }

  public A() {}

  public String toString() {

    return "A{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class B {
  public Number op(final Number x) {

    return 1L;
  }

  public B() {}

  public String toString() {

    return "B{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Number Run() {

    final VDMMap xs = MapUtil.map(new Maplet(1L, new A()), new Maplet(2L, new B()));
    final Object x = Utils.get(xs, 1L);
    Number apply_1 = null;
    if (x instanceof A) {
      apply_1 = ((A) x).op(1L);
    } else if (x instanceof B) {
      apply_1 = ((B) x).op(1L);
    } else {
      throw new RuntimeException("Missing member: op");
    }

    Number apply_2 = null;
    if (x instanceof A) {
      apply_2 = ((A) x).op(apply_1);
    } else if (x instanceof B) {
      apply_2 = ((B) x).op(apply_1);
    } else {
      throw new RuntimeException("Missing member: op");
    }

    final Number q = apply_2;
    return 1L;
  }

  public Entry() {}

  public String toString() {

    return "Entry{}";
  }
}

##########
