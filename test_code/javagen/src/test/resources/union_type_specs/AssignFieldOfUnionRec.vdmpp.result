
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Object Run() {

    Object r = new R1(1L);
    Number atomicTmp_1 = 3L;
    Number atomicTmp_2 = 4L;
    {
        /* Start of atomic statement */
      if (r instanceof R1) {
        ((R1) r).x = atomicTmp_1;
      } else if (r instanceof R2) {
        ((R2) r).x = atomicTmp_1;
      } else {
        throw new RuntimeException("Missing member: x");
      }

      if (r instanceof R1) {
        ((R1) r).x = atomicTmp_2;
      } else if (r instanceof R2) {
        ((R2) r).x = atomicTmp_2;
      } else {
        throw new RuntimeException("Missing member: x");
      }
    } /* End of atomic statement */

    Number apply_1 = null;
    if (r instanceof R1) {
      apply_1 = ((R1) r).x;
    } else if (r instanceof R2) {
      apply_1 = ((R2) r).x;
    } else {
      throw new RuntimeException("Missing member: x");
    }

    return apply_1;
  }

  public Entry() {}

  public String toString() {

    return "Entry{}";
  }

  private static class R1 implements Record {
    public Number x;

    public R1(final Number _x) {

      x = _x;
    }

    public boolean equals(final Object obj) {

      if (!(obj instanceof R1)) {
        return false;
      }

      R1 other = ((R1) obj);

      return Utils.equals(x, other.x);
    }

    public int hashCode() {

      return Utils.hashCode(x);
    }

    public R1 copy() {

      return new R1(x);
    }

    public String toString() {

      return "mk_Entry`R1" + Utils.formatFields(x);
    }
  }

  private static class R2 implements Record {
    public Number x;

    public R2(final Number _x) {

      x = _x;
    }

    public boolean equals(final Object obj) {

      if (!(obj instanceof R2)) {
        return false;
      }

      R2 other = ((R2) obj);

      return Utils.equals(x, other.x);
    }

    public int hashCode() {

      return Utils.hashCode(x);
    }

    public R2 copy() {

      return new R2(x);
    }

    public String toString() {

      return "mk_Entry`R2" + Utils.formatFields(x);
    }
  }
}

##########
