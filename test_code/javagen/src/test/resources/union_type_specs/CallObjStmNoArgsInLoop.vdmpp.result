
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class A {
  public void op() {

    /* skip */

  }

  public A() {}

  public String toString() {

    return "A{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class B {
  public void op() {

    /* skip */

  }

  public B() {}

  public String toString() {

    return "B{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class C {
  public void op() {

    /* skip */

  }

  public C() {}

  public String toString() {

    return "C{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Number Run() {

    final VDMSet xs = SetUtil.set(new A(), new B(), new C());
    {
      for (Iterator iterator_1 = xs.iterator(); iterator_1.hasNext(); ) {
        Object x = (Object) iterator_1.next();
        if (x instanceof A) {
          ((A) x).op();
        } else if (x instanceof B) {
          ((B) x).op();
        } else if (x instanceof C) {
          ((C) x).op();
        } else {
          throw new RuntimeException("Missing operation member: op");
        }
      }
      return 1L;
    }
  }

  public Entry() {}

  public String toString() {

    return "Entry{}";
  }
}

##########
