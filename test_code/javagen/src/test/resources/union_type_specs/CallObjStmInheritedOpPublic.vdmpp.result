
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class A {
  public Number op(final Character a, final Number b) {

    return 1L;
  }

  public A() {}

  public String toString() {

    return "A{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class B extends A {
  public B() {}

  public String toString() {

    return "B{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Object Run() {

    final Object obj = new B();
    final Object a = 'a';
    final Number b = 2L;
    if (obj instanceof A) {
      return ((A) obj).op(((Character) a), b);
    } else if (obj instanceof B) {
      return ((B) obj).op(((Character) a), b);
    } else {
      throw new RuntimeException("Missing operation member: op");
    }
  }

  public Entry() {}

  public String toString() {

    return "Entry{}";
  }
}

##########
