
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class A {
  public static Number a = 0L;
  public Number n;

  public void cg_init_A_1(final Number pn) {

    n = pn;
  }

  public A(final Number pn) {

    cg_init_A_1(pn);
  }

  public Boolean test() {

    a = A.a.longValue() + 1L;
    return n.longValue() > 6L;
  }

  public A() {}

  public String toString() {

    return "A{" + "a := " + Utils.toString(a) + ", n := " + Utils.toString(n) + "}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Object Run() {

    VDMSet setCompResult_1 = SetUtil.set();
    VDMSet set_1 =
        SetUtil.set(new A(1L), new A(2L), new A(3L), new A(4L), new A(5L), new A(6L), new A(7L));
    for (Iterator iterator_1 = set_1.iterator(); iterator_1.hasNext(); ) {
      A x = ((A) iterator_1.next());
      Boolean orResult_1 = false;

      if (Utils.equals(Utils.mod(x.n.longValue(), 2L), 0L)) {
        orResult_1 = true;
      } else {
        orResult_1 = x.test();
      }

      if (orResult_1) {
        setCompResult_1.add(x.n);
      }
    }
    final VDMSet s = Utils.copy(setCompResult_1);
    final Number a = A.a;
    return Tuple.mk_(Utils.copy(s), a);
  }

  public Entry() {}

  public String toString() {

    return "Entry{}";
  }
}

##########
