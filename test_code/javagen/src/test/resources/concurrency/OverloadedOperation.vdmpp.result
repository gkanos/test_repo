
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class SharedCounter implements EvaluatePP {

  public static class SharedCounter_sentinel extends Sentinel {
    public static final int inc = 0;
    public static final int getValue = 1;
    public static final int SharedCounter = 2;
    public static final int toString = 3;
    public final int function_sum = 4;

    public SharedCounter_sentinel() {}

    public SharedCounter_sentinel(final EvaluatePP instance) {

      init(instance, function_sum);
    }
  }

  public volatile Number counter = 0L;
  public volatile Sentinel sentinel;

  public void inc() {

    sentinel.entering(((SharedCounter_sentinel) sentinel).inc);
    try {
      counter = counter.longValue() + 1L;
      sentinel.stateChanged();

    } finally {
      sentinel.leaving(((SharedCounter_sentinel) sentinel).inc);
    }
  }

  public void inc(final Number x) {

    sentinel.entering(((SharedCounter_sentinel) sentinel).inc);
    try {
      counter = counter.longValue() + x.longValue();
      sentinel.stateChanged();

    } finally {
      sentinel.leaving(((SharedCounter_sentinel) sentinel).inc);
    }
  }

  public Number getValue() {

    sentinel.entering(((SharedCounter_sentinel) sentinel).getValue);
    try {
      return counter;

    } finally {
      sentinel.leaving(((SharedCounter_sentinel) sentinel).getValue);
    }
  }

  public SharedCounter() {

    sentinel = new SharedCounter_sentinel(this);
  }

  public String toString() {

    return "SharedCounter{" + "counter := " + Utils.toString(counter) + "}";
  }

  public Boolean evaluatePP(final Number fnr) {

    if (Utils.equals(fnr, 0L)) {
      return Utils.equals(sentinel.act[((SharedCounter_sentinel) sentinel).inc], counter);

    } else if (Utils.equals(fnr, 1L)) {
      return true;

    } else if (Utils.equals(fnr, 2L)) {
      return true;

    } else if (Utils.equals(fnr, 3L)) {
      return true;

    } else {
      return true;
    }
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Incrementer1 extends VDMThread implements EvaluatePP {

  public static class Incrementer1_sentinel extends Sentinel {
    public static final int Incrementer1 = 0;
    public static final int joined = 1;
    public static final int incCounter = 2;
    public static final int toString = 3;
    public final int function_sum = 4;

    public Incrementer1_sentinel() {}

    public Incrementer1_sentinel(final EvaluatePP instance) {

      init(instance, function_sum);
    }
  }

  private volatile SharedCounter sharedCounter;
  private volatile Boolean isFinished = false;
  public volatile Sentinel sentinel;

  public void cg_init_Incrementer1_1(final SharedCounter s) {

    sentinel = new Incrementer1_sentinel(this);
    sharedCounter = s;
  }

  public Incrementer1(final SharedCounter s) {

    cg_init_Incrementer1_1(s);
  }

  public void joined() {

    sentinel.entering(((Incrementer1_sentinel) sentinel).joined);
    try {
      /* skip */

    } finally {
      sentinel.leaving(((Incrementer1_sentinel) sentinel).joined);
    }
  }

  public void incCounter() {

    sentinel.entering(((Incrementer1_sentinel) sentinel).incCounter);
    try {
      long toVar_1 = 100L;

      for (Long i = 1L; i <= toVar_1; i++) {
        sharedCounter.inc();
      }
      isFinished = true;
      sentinel.stateChanged();

    } finally {
      sentinel.leaving(((Incrementer1_sentinel) sentinel).incCounter);
    }
  }

  public Incrementer1() {

    sentinel = new Incrementer1_sentinel(this);
  }

  public String toString() {

    return "Incrementer1{"
        + "sharedCounter := "
        + Utils.toString(sharedCounter)
        + ", isFinished := "
        + Utils.toString(isFinished)
        + "}";
  }

  public Boolean evaluatePP(final Number fnr) {

    if (Utils.equals(fnr, 0L)) {
      return true;

    } else if (Utils.equals(fnr, 1L)) {
      return isFinished;

    } else if (Utils.equals(fnr, 2L)) {
      return true;

    } else if (Utils.equals(fnr, 3L)) {
      return true;

    } else {
      return true;
    }
  }

  public void run() {
    incCounter();
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Incrementer2 extends VDMThread implements EvaluatePP {

  public static class Incrementer2_sentinel extends Sentinel {
    public static final int Incrementer2 = 0;
    public static final int joined = 1;
    public static final int incCounter = 2;
    public static final int toString = 3;
    public final int function_sum = 4;

    public Incrementer2_sentinel() {}

    public Incrementer2_sentinel(final EvaluatePP instance) {

      init(instance, function_sum);
    }
  }

  private volatile SharedCounter sharedCounter;
  private volatile Boolean isFinished = false;
  public volatile Sentinel sentinel;

  public void cg_init_Incrementer2_1(final SharedCounter s) {

    sentinel = new Incrementer2_sentinel(this);
    sharedCounter = s;
  }

  public Incrementer2(final SharedCounter s) {

    cg_init_Incrementer2_1(s);
  }

  public void joined() {

    sentinel.entering(((Incrementer2_sentinel) sentinel).joined);
    try {
      /* skip */

    } finally {
      sentinel.leaving(((Incrementer2_sentinel) sentinel).joined);
    }
  }

  public void incCounter() {

    sentinel.entering(((Incrementer2_sentinel) sentinel).incCounter);
    try {
      long toVar_2 = 100L;

      for (Long i = 1L; i <= toVar_2; i++) {
        sharedCounter.inc(1L);
      }
      isFinished = true;
      sentinel.stateChanged();

    } finally {
      sentinel.leaving(((Incrementer2_sentinel) sentinel).incCounter);
    }
  }

  public Incrementer2() {

    sentinel = new Incrementer2_sentinel(this);
  }

  public String toString() {

    return "Incrementer2{"
        + "sharedCounter := "
        + Utils.toString(sharedCounter)
        + ", isFinished := "
        + Utils.toString(isFinished)
        + "}";
  }

  public Boolean evaluatePP(final Number fnr) {

    if (Utils.equals(fnr, 0L)) {
      return true;

    } else if (Utils.equals(fnr, 1L)) {
      return isFinished;

    } else if (Utils.equals(fnr, 2L)) {
      return true;

    } else if (Utils.equals(fnr, 3L)) {
      return true;

    } else {
      return true;
    }
  }

  public void run() {
    incCounter();
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry implements EvaluatePP {

  public static class Entry_sentinel extends Sentinel {
    public static final int Run = 0;
    public static final int Entry = 1;
    public static final int toString = 2;
    public final int function_sum = 3;

    public Entry_sentinel() {}

    public Entry_sentinel(final EvaluatePP instance) {

      init(instance, function_sum);
    }
  }

  public volatile Sentinel sentinel;

  public static Object Run() {

    final SharedCounter s = new SharedCounter();
    final Incrementer1 i1 = new Incrementer1(s);
    final Incrementer2 i2 = new Incrementer2(s);
    final Incrementer1 i3 = new Incrementer1(s);
    {
      i1.start();
      i2.start();
      i3.start();
      i1.joined();
      i2.joined();
      i3.joined();
      return s.getValue();
    }
  }

  public Entry() {

    sentinel = new Entry_sentinel(this);
  }

  public String toString() {

    return "Entry{}";
  }

  public Boolean evaluatePP(final Number fnr) {

    if (Utils.equals(fnr, 0L)) {
      return true;

    } else if (Utils.equals(fnr, 1L)) {
      return true;

    } else if (Utils.equals(fnr, 2L)) {
      return true;

    } else {
      return true;
    }
  }
}

##########
