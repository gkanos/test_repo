
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class A {
  public void op() {

    final B b = new B();
    b.op();
  }

  public A() {}

  public String toString() {

    return "A{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class B {
  public void op() {

    /* skip */

  }

  public B() {}

  public String toString() {

    return "B{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class S {
  public static A a = new A();
  private CPU CPU1 = new CPU(quotes.FPQuote.getInstance(), 2.2E7);
  public static B b = new B();
  private CPU CPU2 = new CPU(quotes.FPQuote.getInstance(), 1.1E7);
  private BUS BUS1 = new BUS(quotes.CSMACDQuote.getInstance(), 72000.0, SetUtil.set(CPU1, CPU2));

  public S() {

    CPU1.deploy(S.a, SeqUtil.seq('A'));
    CPU2.deploy(S.b, SeqUtil.seq('B'));
  }
}

##########
*Quotes*
FP,CSMACD
##########
