
import java.util.*;
import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;

@SuppressWarnings("all")
final public class Entry implements java.io.Serializable {
  private Entry() {}

  public static void Entry_T1_Run(final TestAccumulator testAccumulator) {

    final Store store = new Store();
    final IdGenerator gen = new IdGenerator();
    {
      final Number ID_1 = gen.inc();
      final Number ID_2 = gen.inc();
      store.staticReg(ID_1, Entry.class);
      store.staticReg(ID_2, Other.class);
    }

    SequenceTraceNode sequence_1 = new SequenceTraceNode();
    CallStatement callStm_1 =
        new CallStatement() {
          public Boolean meetsPreCond() {

            return Other.pre_op(TraceUtil.readState(Other.class, Other.St.class));
          }

          public Object execute() {

            return Other.op();
          }

          public String toString() {

            return "Other`op()";
          }
        };
    StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

    RepeatTraceNode repeat_1 = new RepeatTraceNode(apply_1, 1L, 5L);

    sequence_1.add(repeat_1);

    TraceNode.executeTests(sequence_1, testAccumulator, store);
  }

  public String toString() {

    return "Entry{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
final public class Other implements java.io.Serializable {
  private static St St = new St(0L);

  private Other() {}

  public static Number op() {

    if (!(pre_op(St))) {
      throw new RuntimeException("Precondition failure: pre_op");
    }

    St.x = St.x.longValue() + 1L;
    return St.x;
  }

  public static Boolean pre_op(final St St) {

    return St.x.longValue() < 2L;
  }

  public String toString() {

    return "Other{" + "St := " + Utils.toString(St) + "}";
  }

  public static class St implements Record {
    public Number x;

    public St(final Number _x) {

      x = _x;
    }

    public boolean equals(final Object obj) {

      if (!(obj instanceof St)) {
        return false;
      }

      St other = ((St) obj);

      return Utils.equals(x, other.x);
    }

    public int hashCode() {

      return Utils.hashCode(x);
    }

    public St copy() {

      return new St(x);
    }

    public String toString() {

      return "mk_Other`St" + Utils.formatFields(x);
    }
  }
}

##########
