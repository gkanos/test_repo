
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Object Run() {

    final Boolean x1 = Utils.is_Tuple(Tuple.mk_(1L, 1L), Number.class, Boolean.class);
    final Boolean x2 = Utils.is_Tuple(Tuple.mk_(1L, false), Number.class, Boolean.class);
    final Boolean x3 = Utils.is_(Tuple.mk_(1L, 2L), Rec.class);
    final Boolean x4 = Utils.is_(new Rec(5L, 5L), Rec.class);
    final Boolean x5 = Utils.is_(new Entry(), Entry.class);
    final Boolean x6 = Utils.is_(55L, Entry.class);
    final Boolean x7 = true;
    final Boolean x8 = Utils.is_(SeqUtil.seq(1L, 2L, 3L), VDMSeq.class);
    final Boolean x9 = Utils.is_(null, VDMSeq.class);
    final Boolean x10 = Utils.is_(SetUtil.set(1L, 2L, 3L), VDMSet.class);
    final Boolean x11 = Utils.is_(2L, VDMSet.class);
    final Boolean x12 = Utils.is_(MapUtil.map(new Maplet(1L, 2L)), VDMMap.class);
    final Boolean x13 = Utils.is_(SetUtil.set(), VDMMap.class);
    return SeqUtil.seq(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13);
  }

  public Entry() {}

  public String toString() {

    return "Entry{}";
  }

  private static class Rec implements Record {
    public Number x;
    public Number y;

    public Rec(final Number _x, final Number _y) {

      x = _x;
      y = _y;
    }

    public boolean equals(final Object obj) {

      if (!(obj instanceof Rec)) {
        return false;
      }

      Rec other = ((Rec) obj);

      return (Utils.equals(x, other.x)) && (Utils.equals(y, other.y));
    }

    public int hashCode() {

      return Utils.hashCode(x, y);
    }

    public Rec copy() {

      return new Rec(x, y);
    }

    public String toString() {

      return "mk_Entry`Rec" + Utils.formatFields(x, y);
    }
  }
}

##########
