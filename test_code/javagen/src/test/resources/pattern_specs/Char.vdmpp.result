
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class A {
  public Character charPatternOp(final Character charPattern_1) {

    Boolean success_1 = Utils.equals(charPattern_1, 'q');
    if (!(success_1)) {
      throw new RuntimeException("Char pattern match failed");
    }

    final Character charPattern_2 = 'a';
    Boolean success_2 = Utils.equals(charPattern_2, 'a');
    if (!(success_2)) {
      throw new RuntimeException("Char pattern match failed");
    }

    return 'b';
  }

  public A() {}

  public static Character charPatternFun(final Character charPattern_3) {

    Boolean success_3 = Utils.equals(charPattern_3, 'q');
    if (!(success_3)) {
      throw new RuntimeException("Char pattern match failed");
    }

    final Character charPattern_4 = 'a';
    Boolean success_4 = Utils.equals(charPattern_4, 'a');
    if (!(success_4)) {
      throw new RuntimeException("Char pattern match failed");
    }

    return 'b';
  }

  public String toString() {

    return "A{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Object Run() {

    return SeqUtil.seq(new A().charPatternOp('q'), A.charPatternFun('q'));
  }

  public Entry() {}

  public String toString() {

    return "Entry{}";
  }
}

##########
