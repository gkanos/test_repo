
import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class A {
  public Number intPatternOp(final Number intPattern_1) {

    Boolean success_1 = Utils.equals(intPattern_1, 3L);
    if (!(success_1)) {
      throw new RuntimeException("Integer pattern match failed");
    }

    final Number intPattern_2 = 1L;
    Boolean success_2 = Utils.equals(intPattern_2, 1L);
    if (!(success_2)) {
      throw new RuntimeException("Integer pattern match failed");
    }

    return 2L;
  }

  public A() {}

  public static Number intPatternFun(final Number intPattern_3) {

    Boolean success_3 = Utils.equals(intPattern_3, 3L);
    if (!(success_3)) {
      throw new RuntimeException("Integer pattern match failed");
    }

    final Number intPattern_4 = 1L;
    Boolean success_4 = Utils.equals(intPattern_4, 1L);
    if (!(success_4)) {
      throw new RuntimeException("Integer pattern match failed");
    }

    return 2L;
  }

  public String toString() {

    return "A{}";
  }
}

##########

import java.util.*;
import org.overture.codegen.runtime.*;

@SuppressWarnings("all")
public class Entry {
  public static Object Run() {

    return SeqUtil.seq(new A().intPatternOp(3L), A.intPatternFun(3L));
  }

  public Entry() {}

  public String toString() {

    return "Entry{}";
  }
}

##########
