
import java.util.*;
import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;

@SuppressWarnings("all")
public class Entry implements java.io.Serializable {
  private Number op() {

    return 32L;
  }

  public Entry() {}

  private static Number f() {

    return 23L;
  }

  public void Entry_T1_Run(final TestAccumulator testAccumulator) {

    final Store store = new Store();
    final IdGenerator gen = new IdGenerator();
    SequenceTraceNode sequence_1 = new SequenceTraceNode();
    AlternativeTraceNode alternatives_1 = new AlternativeTraceNode();
    CallStatementPp callStm_1 =
        new CallStatementPp() {
          public Object execute() {

            Number result_1 = ((Entry) instance).op();
            return result_1;
          }

          public String toString() {

            return "op()";
          }
        };
    StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

    CallStatementPp callStm_2 =
        new CallStatementPp() {
          public Object execute() {

            return f();
          }

          public String toString() {

            return "f()";
          }
        };
    StatementTraceNode apply_2 = new StatementTraceNode(callStm_2);

    alternatives_1.add(apply_1);
    alternatives_1.add(apply_2);
    sequence_1.add(alternatives_1);

    TraceNode.executeTests(sequence_1, Entry.class, testAccumulator, store);
  }

  public String toString() {

    return "Entry{}";
  }
}

##########
